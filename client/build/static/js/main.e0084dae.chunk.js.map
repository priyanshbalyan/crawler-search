{"version":3,"sources":["components/cards.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["Cards","rows","this","props","react_default","a","createElement","map","r","index_es","style","margin","key","title","variant","component","description","language","stars","tags","join","Component","Home","state","search","loading","e","_this2","setState","axios","post","then","resp","data","catch","err","console","log","_this3","marginLeft","marginRight","marginTop","padding","maxWidth","TextField_default","type","fullWidth","placeholder","onKeyPress","handleKeys","onChange","target","value","color","onClick","Fade_default","in","LinearProgress_default","Slide_default","direction","length","mountOnEnter","unmountOnExit","cards","App","home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAgCeA,mLAvBP,IAAMC,EAAOC,KAAKC,MAAMF,KAGxB,OACEG,EAAAC,EAAAC,cAAA,WACGL,EAAKM,IAAI,SAAAC,GACR,OAAQJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,MAAO,CAACC,OAAO,GAAIC,IAAKJ,EAAEK,OACtCT,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYK,QAAQ,KAAKC,UAAU,MAAMP,EAAEK,OAC3CT,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYM,UAAU,KAAKP,EAAEQ,cAE/BZ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACG,EAAA,EAAD,kBAAuBD,EAAES,UACzBb,EAAAC,EAAAC,cAACG,EAAA,EAAD,eAAoBD,EAAEU,OAAS,KAC/Bd,EAAAC,EAAAC,cAACG,EAAA,EAAD,cAAmBD,EAAEW,KAAKC,KAAK,OAAS,sBAnBtCC,gEC2DLC,6MArDXC,MAAQ,CACJC,OAAO,GACPC,SAAQ,EACRxB,KAAK,4HAOEyB,GACG,SAAPA,EAAEd,KACDV,KAAKsB,0CAGL,IAAAG,EAAAzB,KACJA,KAAK0B,SAAS,CAACH,SAAQ,EAAMxB,KAAK,KAClC4B,IAAMC,KAAK,qCAAqC5B,KAAKqB,MAAMC,QAAQO,KAAK,SAAAC,GAEpEL,EAAKC,SAAS,CAACH,SAAQ,EAAOxB,KAAK+B,EAAKC,KAAKA,SAC9CC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZR,EAAKC,SAAS,CAACH,SAAQ,uCAItB,IAAAa,EAAApC,KACL,OACIE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKI,MAAO,CAAC6B,WAAW,OAAQC,YAAY,OAAQC,UAAU,GAAIC,QAAQ,GAAIC,SAAS,MAEvFvC,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,CAAWwC,KAAK,OAAOC,WAAS,EAACC,YAAY,8CAA8CC,WAAY,SAAAtB,GAAC,OAAEY,EAAKW,WAAWvB,IAAIwB,SAAU,SAAAxB,GAAIY,EAAKV,SAAS,CAACJ,OAAOE,EAAEyB,OAAOC,SAAUA,MAAOlD,KAAKqB,MAAMC,SACvMpB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQ4C,MAAM,UAAUC,QAAS,SAAA5B,GAAC,OAAEY,EAAKd,WAAzC,UAEApB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACiD,EAAAlD,EAAD,CAAMmD,GAAItD,KAAKqB,MAAME,SACjBrB,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,OAGJD,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACoD,EAAArD,EAAD,CAAOsD,UAAU,KAAKH,GAA6B,IAAzBtD,KAAKqB,MAAMtB,KAAK2D,OAAYC,cAAY,EAACC,eAAa,GAC5E1D,EAAAC,EAAAC,cAACyD,EAAD,CAAO9D,KAAMC,KAAKqB,MAAMtB,iBA5CzBoB,aCQJ2C,2LARP,OACI5D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC2D,EAAD,cANE5C,cCOE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAQpE,EAAAC,EAAAC,cAAEmE,EAAF,MAAYC,SAASC,eAAe,SD4H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.e0084dae.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\n\r\nclass Cards extends Component{\r\n\r\n    \r\n    render(){\r\n\r\n        const rows = this.props.rows;\r\n        // console.log(rows);\r\n\r\n        return (\r\n          <div>\r\n            {rows.map(r=>{\r\n              return (<Card style={{margin:5}} key={r.title}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" component=\"h2\">{r.title}</Typography>\r\n                  <Typography component=\"p\">{r.description}</Typography>\r\n                </CardContent>\r\n                <CardContent>\r\n                  <Typography>Language: {r.language}</Typography>\r\n                  <Typography>Stars: {r.stars || \"0\"}</Typography>\r\n                  <Typography>Tags: {r.tags.join(\", \") || \"No tag\"}</Typography>\r\n                </CardContent>\r\n              </Card>)\r\n            })}\r\n          </div>      \r\n        );\r\n    }\r\n}\r\n\r\nexport default Cards;","import React, { Component } from 'react';\r\nimport axios from \"axios\";  \r\nimport TextField from '@material-ui/core/TextField';\r\nimport Cards from '../components/cards';\r\nimport { Button } from '@material-ui/core';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        search:\"\",\r\n        loading:false,\r\n        rows:[]\r\n    };\r\n\r\n    componentWillMount() {\r\n        // console.log(this.state.rows, this.state.rows.length);\r\n    }\r\n\r\n    handleKeys(e){\r\n        if(e.key==\"Enter\")\r\n            this.search();\r\n    }\r\n\r\n    search(){\r\n        this.setState({loading:true, rows:[]});\r\n        axios.post('http://localhost:3001/search?text='+this.state.search).then(resp=>{\r\n            // console.log(resp.data)\r\n            this.setState({loading:false, rows:resp.data.data});\r\n        }).catch(err=>{\r\n            console.log(err);\r\n            this.setState({loading:false});\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <div>  \r\n                <div style={{marginLeft:\"auto\", marginRight:\"auto\", marginTop:20, padding:20, maxWidth:600}}>\r\n                \r\n                <TextField type=\"text\" fullWidth placeholder=\"Type a repository name, description or tags\" onKeyPress={e=>this.handleKeys(e)} onChange={e=>{this.setState({search:e.target.value})}} value={this.state.search} />\r\n                <Button color=\"primary\" onClick={e=>this.search()}>Search</Button>\r\n                \r\n                <br />\r\n\r\n                <Fade in={this.state.loading}>\r\n                    <LinearProgress />\r\n                </Fade>\r\n\r\n                <br/>\r\n\r\n                <Slide direction=\"up\" in={this.state.rows.length!==0} mountOnEnter unmountOnExit>\r\n                    <Cards rows={this.state.rows} />\r\n                </Slide>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport Home from './pages/home';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                <Home />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( < App / > , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}